// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: departments.sql

package medical

import (
	"context"
)

const createDept = `-- name: CreateDept :one
INSERT INTO departments (
  name
) VALUES (
  $1
) RETURNING id, name
`

func (q *Queries) CreateDept(ctx context.Context, name string) (Departments, error) {
	row := q.db.QueryRow(ctx, createDept, name)
	var i Departments
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const dropDept = `-- name: DropDept :exec
DELETE FROM departments
WHERE id = $1
`

func (q *Queries) DropDept(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, dropDept, id)
	return err
}

const getDept = `-- name: GetDept :one
SELECT id, name FROM departments
WHERE name LIKE $1 LIMIT 1
`

func (q *Queries) GetDept(ctx context.Context, name string) (Departments, error) {
	row := q.db.QueryRow(ctx, getDept, name)
	var i Departments
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const updateDept = `-- name: UpdateDept :exec
UPDATE departments
SET name = $2
WHERE id = $1
`

type UpdateDeptParams struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateDept(ctx context.Context, arg UpdateDeptParams) error {
	_, err := q.db.Exec(ctx, updateDept, arg.ID, arg.Name)
	return err
}
