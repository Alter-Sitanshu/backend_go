// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: doctors.sql

package medical

import (
	"context"
)

const createDoc = `-- name: CreateDoc :one
INSERT INTO doctors (
  first_name, last_name, dept, contact, experience, fee, email
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
) RETURNING id, first_name, last_name, dept, contact, experience, fee, email, created_at
`

type CreateDocParams struct {
	FirstName  string `json:"first_name"`
	LastName   string `json:"last_name"`
	Dept       int32  `json:"dept"`
	Contact    string `json:"contact"`
	Experience int32  `json:"experience"`
	Fee        int32  `json:"fee"`
	Email      string `json:"email"`
}

func (q *Queries) CreateDoc(ctx context.Context, arg CreateDocParams) (Doctors, error) {
	row := q.db.QueryRow(ctx, createDoc,
		arg.FirstName,
		arg.LastName,
		arg.Dept,
		arg.Contact,
		arg.Experience,
		arg.Fee,
		arg.Email,
	)
	var i Doctors
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Dept,
		&i.Contact,
		&i.Experience,
		&i.Fee,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const dropDoc = `-- name: DropDoc :exec
DELETE FROM doctors
WHERE id = $1
`

func (q *Queries) DropDoc(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, dropDoc, id)
	return err
}

const getDocByDept = `-- name: GetDocByDept :many
SELECT id, first_name, last_name, dept, contact, experience, fee, email, created_at FROM doctors
WHERE dept = $1
`

func (q *Queries) GetDocByDept(ctx context.Context, dept int32) ([]Doctors, error) {
	rows, err := q.db.Query(ctx, getDocByDept, dept)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Doctors
	for rows.Next() {
		var i Doctors
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Dept,
			&i.Contact,
			&i.Experience,
			&i.Fee,
			&i.Email,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDocByName = `-- name: GetDocByName :many
SELECT id, first_name, last_name, dept, contact, experience, fee, email, created_at FROM doctors
WHERE first_name LIKE $1
ORDER BY id
`

func (q *Queries) GetDocByName(ctx context.Context, firstName string) ([]Doctors, error) {
	rows, err := q.db.Query(ctx, getDocByName, firstName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Doctors
	for rows.Next() {
		var i Doctors
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Dept,
			&i.Contact,
			&i.Experience,
			&i.Fee,
			&i.Email,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDoc = `-- name: UpdateDoc :exec
UPDATE doctors
SET
  first_name = COALESCE(NULLIF($1, ''), first_name),
  last_name = COALESCE(NULLIF($2, ''), last_name),
  dept = COALESCE($3, dept),
  contact = COALESCE(NULLIF($4, ''), contact)
WHERE id = $5
`

type UpdateDocParams struct {
	FirstName interface{} `json:"first_name"`
	LastName  interface{} `json:"last_name"`
	Dept      int32       `json:"dept"`
	Contact   interface{} `json:"contact"`
	ID        int64       `json:"id"`
}

func (q *Queries) UpdateDoc(ctx context.Context, arg UpdateDocParams) error {
	_, err := q.db.Exec(ctx, updateDoc,
		arg.FirstName,
		arg.LastName,
		arg.Dept,
		arg.Contact,
		arg.ID,
	)
	return err
}
