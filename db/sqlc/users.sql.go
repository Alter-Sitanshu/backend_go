// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package medical

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  first_name, last_name, contact
) VALUES (
  $1, $2, $3
) RETURNING id, first_name, last_name, contact, created_at
`

type CreateUserParams struct {
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Contact   string `json:"contact"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (Users, error) {
	row := q.db.QueryRow(ctx, createUser, arg.FirstName, arg.LastName, arg.Contact)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Contact,
		&i.CreatedAt,
	)
	return i, err
}

const dropUser = `-- name: DropUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DropUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, dropUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, first_name, last_name, contact, created_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (Users, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Contact,
		&i.CreatedAt,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, first_name, last_name, contact, created_at FROM users
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetUsers(ctx context.Context, arg GetUsersParams) ([]Users, error) {
	rows, err := q.db.Query(ctx, getUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Users
	for rows.Next() {
		var i Users
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Contact,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users SET contact = $2
WHERE id = $1
RETURNING id, first_name, last_name, contact, created_at
`

type UpdateUserParams struct {
	ID      int64  `json:"id"`
	Contact string `json:"contact"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser, arg.ID, arg.Contact)
	return err
}
